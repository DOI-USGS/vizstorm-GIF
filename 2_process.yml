target_default: 2_process

include:
  - 1_fetch.yml

packages:
  - sf
  - dplyr
  - fasterize
  - snow
  - RNetCDF
  - ncmeta
  - intersectr
  - zoo
  - raster

file_extensions:
  - feather
  - ind

sources:
  - 2_process/src/choose_timesteps.R
  - 2_process/src/extract_storm_line.R
  - 2_process/src/filter_sites_custom.R
  - 2_process/src/filter_sites_geom.R
  - 2_process/src/filter_using_custom.R
  - 2_process/src/process_snow_rasters.R
  - 2_process/src/process_river_geoms.R
  - 2_process/src/normalize_streamdata.R
  - 2_process/src/clean_streamdata.R
  - 2_process/src/process_area_weights.R

targets:

  2_process:
    depends:
      - 2_process/out/timesteps.rds.ind
      - 2_process/out/gage_sites.rds.ind
      - 2_process/out/snow_raster_interp.nc.ind
      - 2_process/out/river_geoms.rds.ind
      - 2_process/out/normalized_streamdata.rds.ind
      - 2_process/out/cleaned_streamdata.rds.ind
  timestep:
    command: viz_config[[I('frame_step')]]

  # Takes ~ 5 minutes to run for 28 days
  2_process/out/snow_raster_interp.nc.ind:
    command: interpolate_snow_raster_layers(
      ind_file = target_name,
      timestep_ind = '2_process/out/timesteps.rds.ind',
      frame_step = timestep,
      fetch_snow_tasks_ind = '1_fetch/log/1_fetch_snow_tasks.ind')
  2_process/out/snow_raster_interp.nc:
    command: gd_get('2_process/out/snow_raster_interp.nc.ind')

  2_process/out/timesteps.rds.ind:
    command: choose_timesteps(target_name, dates = dates)
  2_process/out/timesteps.rds:
    command: gd_get('2_process/out/timesteps.rds.ind')

  2_process/out/gage_sites_geom.rds.ind:
    command: filter_sites_geom(
      ind_file = target_name,
      sites_ind = '1_fetch/out/all_sites.rds.ind',
      view_polygon = view_polygon,
      focus_geoms_ind = '1_fetch/out/focus_geoms.rds.ind',
      proj_str = proj_str)
  2_process/out/gage_sites_geom.rds:
    command: gd_get('2_process/out/gage_sites_geom.rds.ind')
  2_process/out/outro_gage_sites_geom.rds.ind:
    command: filter_sites_geom(
      ind_file = target_name,
      sites_ind = '1_fetch/out/all_sites_really.rds.ind',
      view_polygon = view_polygon,
      focus_geoms_ind = '1_fetch/out/focus_geoms.rds.ind',
      proj_str = proj_str)
  2_process/out/outro_gage_sites_geom.rds:
    command: gd_get('2_process/out/outro_gage_sites_geom.rds.ind')
  2_process/out/gage_sites_custom.rds.ind:
    command: filter_sites_custom(
      ind_file = target_name,
      sites_ind = '2_process/out/gage_sites_geom.rds.ind',
      dates = dates)
  2_process/out/gage_sites_custom.rds:
    command: gd_get('2_process/out/gage_sites_custom.rds.ind')
  2_process/out/gage_sites.rds.ind:
    command: filter_using_custom(
      ind_file = target_name,
      sites_ind = '2_process/out/gage_sites_geom.rds.ind',
      sites_custom_ind = '2_process/out/gage_sites_custom.rds.ind')
  2_process/out/gage_sites.rds:
    command: gd_get('2_process/out/gage_sites.rds.ind')

  2_process/out/area_weights.rds.ind:
    command: process_area_weights(ind_file = target_name,
      nc_ind='1_fetch/out/gridmet_pr.nc.ind',
      nc_var = I("precipitation_amount"),
      viz_polys_ind = '1_fetch/out/fetch_viz_cells.rds.ind')
  2_process/out/area_weights.rds:
    command: gd_get('2_process/out/area_weights.rds.ind')

  2_process/out/precip_intersect.rds.ind:
    command: process_intersectr(ind_file = target_name,
      nc_ind='1_fetch/out/gridmet_pr.nc.ind',
      nc_var = I("precipitation_amount"),
      area_weights_ind = '2_process/out/area_weights.rds.ind',
      dates = dates)
  2_process/out/precip_intersect.rds:
    command: gd_get('2_process/out/precip_intersect.rds.ind')

  2_process/out/tmin_intersect.rds.ind:
    command: process_intersectr(ind_file = target_name,
      nc_ind='1_fetch/out/gridmet_tmmn.nc.ind',
      nc_var = I("air_temperature"),
      area_weights_ind = '2_process/out/area_weights.rds.ind',
      dates = dates)
  2_process/out/tmin_intersect.rds:
    command: gd_get('2_process/out/tmin_intersect.rds.ind')

  river_geom_config:
    command: viz_config[I(c('coastal_threshold_sqkm',
                          'inland_threshold_sqkm',
                          'simplification_tolerance_m'))]

  2_process/out/river_geoms.rds.ind:
    command: process_river_geoms(
      ind_file=target_name,
      major_river_geoms_ind='1_fetch/out/major_river_geometry.rds.ind',
      gage_river_geoms_ind='1_fetch/out/gage_river_geometry.rds.ind',
      waterbody_geoms_ind='1_fetch/out/waterbodies.rds.ind',
      river_geom_config)
  2_process/out/river_geoms.rds:
    command: gd_get('2_process/out/river_geoms.rds.ind')

  stage_gap_threshold:
    command: viz_config[I('stage_gap_threshold')]
  2_process/out/normalized_streamdata.rds.ind:
    command: normalize_streamdata(
      ind_file = target_name,
      raw_ind_file = '1_fetch/out/streamdata.rds.ind',
      sites_ind_file = '2_process/out/gage_sites.rds.ind',
      timesteps_ind_file = '2_process/out/timesteps.rds.ind',
      stage_gap_threshold = stage_gap_threshold)
  2_process/out/normalized_streamdata.rds:
    command: gd_get('2_process/out/normalized_streamdata.rds.ind')

  # manual filtering step to remove points we expect won't make it past Provisional
  2_process/out/cleaned_streamdata.rds.ind:
    command: clean_streamdata(
      ind_file = target_name,
      normalized_ind_file = '2_process/out/normalized_streamdata.rds.ind')
  2_process/out/cleaned_streamdata.rds:
    command: gd_get('2_process/out/cleaned_streamdata.rds.ind')
