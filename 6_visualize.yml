target_default: 6_visualize

include:
  - 2_process.yml

packages:
  - dplyr
  - tidyr

file_extensions:
  - feather
  - ind

sources:
  - 6_visualize/src/create_gif_tasks.R
  - 6_visualize/src/create_gif_makefile.R
  - 6_visualize/src/prep_watermark_fun.R
  - 6_visualize/src/prep_basemap_fun.R
  - 6_visualize/src/prep_view_fun.R
  - 6_visualize/src/prep_storm_point_fun.R
  - 6_visualize/src/prep_storm_line_fun.R
  - 6_visualize/src/prep_precip_fun.R
  - 6_visualize/src/prep_rivers_fun.R
  - 6_visualize/src/prep_legend_fun.R
  - 6_visualize/src/prep_datetime_fun.R
  - 6_visualize/src/combine_animation_frames.R

targets:

  6_visualize:
    depends:
      - 6_storm_gif_tasks.yml

  # here we'll generate the components for basemap, focus_geoms, secondary_geoms,
  # adn storm_line. each of these components doesn't change over time. each
  # component is a closure, i.e., a function that contains all the data it needs
  # to run. the closure should accept 0 arguments. the closure should be saved
  # into an RDS file with a corresponding .rds.ind indicator file.

  # tmp=temporary folder for holding files to only be created on 1 computer.
  # log=folder for the few indicator files that don't correspond to a data file.
  visualize_folders:
    command: list(
      tmp=I('6_visualize/tmp'),
      log=I('6_visualize/log'))

  image_placement:
    command: viz_config[[I('image_placement')]]

  view_fun:
    command: prep_view_fun(view_polygon)

  basemap_fun:
    command: prep_basemap_fun('1_fetch/out/focus_geoms.rds.ind', '1_fetch/out/secondary_geoms.rds.ind')

  storm_line_fun:
    command: prep_storm_line_fun("2_process/out/storm_line.rds.ind")

  storm_points_sf:
    command: fetch_read('2_process/out/storm_points_interp.rds.ind')

  precip_rasters:
    command: fetch_read('2_process/out/precip_rasters.rds.ind')

  rivers_fun:
    command: prep_rivers_fun('2_process/out/river_geoms.rds.ind')

  legend_fun:
    command: prep_legend_fun(precip_bins = precip_bins, legend_styles = legend_styles)

  watermark_fun:
    command: prep_watermark_fun('6_visualize/in/usgs_logo_black.png')

  #### intro frames - animating the link between gages and sparklines ####

  intro_frame_config:
    command: viz_config[I(c('width','height'))]

  n_intro_frames:
    command: viz_config[[I('n_intro_frames')]]
  intro_gif_tasks:
    command: create_intro_gif_tasks(
      n_timesteps = n_intro_frames,
      folders = visualize_folders)

  6_intro_gif_tasks.yml:
    command: create_intro_gif_makefile(
      makefile = target_name,
      task_plan = intro_gif_tasks,
      remake_file = I('6_visualize.yml'))

  # Build the timestep-specific functions and png files.
  # When we like how this is looking, we can set task_names=NULL to build all frames.
  # If you're trying to iterate on just a few png frames, delete 6_visualize/log/6_intro_gif_tasks.ind,
  # then you can call scmake('6_visualize/log/6_intro_gif_tasks.ind') repeatedly.
  # Once the .ind file exists, you'll need to call scmake('6_visualize/log/6_intro_gif_tasks.ind', force=TRUE)
  #   to iterate on all frames at once.
  trial_intro_frames:
    command: c(I(c(
      'a_00_001',
      'a_00_005',
      'a_00_009')))
  6_visualize/log/6_intro_gif_tasks.ind:
    command: loop_tasks(
      task_plan=intro_gif_tasks, task_makefile='6_intro_gif_tasks.yml',
      task_names=trial_intro_frames,
      num_tries=I(1), sleep_on_error=I(0))

  #### storm frames - animating the progression of the storm, precip, and stage over time ####

  storm_frame_config:
    command: viz_config[I(c('width','height'))]

  storm_gif_tasks:
    command: create_storm_gif_tasks(
      timestep_ind = '2_process/out/timesteps.rds.ind',
      folders = visualize_folders)

  6_storm_gif_tasks.yml:
    command: create_storm_gif_makefile(
      makefile = target_name,
      task_plan = storm_gif_tasks,
      remake_file = I('6_visualize.yml'))

  # Build the timestep-specific functions and png files.
  # When we like how this is looking, we can set task_names=NULL to build all frames.
  # If you're trying to iterate on just a few png frames, delete 6_visualize/log/6_storm_gif_tasks.ind,
  # then you can call scmake('6_visualize/log/6_storm_gif_tasks.ind') repeatedly.
  # Once the .ind file exists, you'll need to call scmake('6_visualize/log/6_storm_gif_tasks.ind', force=TRUE)
  #   to iterate on all frames at once.
  trial_storm_frames:
    command: c(I(c(
      'a_20170826_14',
      'a_20170827_14',
      'a_20170828_14')))
  6_visualize/log/6_storm_gif_tasks.ind:
    command: loop_tasks(
      task_plan=storm_gif_tasks, task_makefile='6_storm_gif_tasks.yml',
      task_names=trial_storm_frames,
      num_tries=I(1), sleep_on_error=I(0))

  # Combine the png files into a gif.
  #
  # For now, call scmake('6_visualize/out/animation_a.png', force=TRUE)
  #   if any of the pngs have changed
  #
  # When we're close to done, we can add
  #   depends:
  #     - 6_visualize/log/6_intro_gif_tasks.ind
  #     - 6_visualize/log/6_storm_gif_tasks.ind
  #   and set task_names=NULL to build all the frames.
  trial_frames:
    command: c(trial_intro_frames, trial_storm_frames)
  animation_cfg:
    command: viz_config[I('frame_delay_cs')]
  6_visualize/out/animation_a.gif:
    command: combine_animation_frames(
      gif_file=target_name,
      animation_cfg=animation_cfg,
      task_names=trial_frames)
